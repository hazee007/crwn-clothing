{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\ECommerce\\\\crwn-clothing\\\\src\\\\components\\\\cart-dropdown\\\\cart-dropdown.components.jsx\";\nimport React from 'react';\nimport CustomButton from '../custom-button/custom-button.component';\nimport CartItem from '../cart-item/cart-item.components';\nimport './cart-dropdown.style.scss';\nimport { connect } from 'react-redux';\nimport { selectCartItems } from '../../redux/cart/cart.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport { withRouter } from 'react-router-dom';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\n\nconst CartDropDown = ({\n  cartItems,\n  history,\n  dispatch\n}) => React.createElement(\"div\", {\n  className: \"cart-dropdown\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  className: \"cart-items\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, cartItems.length ? cartItems.map(cartItem => React.createElement(CartItem, {\n  key: cartItem.id,\n  item: cartItem,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n})) : React.createElement(\"span\", {\n  className: \"empty-message\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, \"Your cart is empty\")), React.createElement(CustomButton, {\n  onClick: () => {\n    history.push('/checkout');\n    dispatch(toggleCartHidden());\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, \"GO TO CHECKOUT\")); // const mapStateToProps = ({cart: {cartItems}}) =>({\n//     cartItems\n// });  this is replaced with the new code so that our application do not rerender(reload) when a state change in the app that does not affect this particular state /// this is what selectors are for..\n\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems\n});\nexport default withRouter(connect(mapStateToProps)(CartDropDown));","map":{"version":3,"sources":["C:/Users/user/Desktop/ECommerce/crwn-clothing/src/components/cart-dropdown/cart-dropdown.components.jsx"],"names":["React","CustomButton","CartItem","connect","selectCartItems","createStructuredSelector","withRouter","toggleCartHidden","CartDropDown","cartItems","history","dispatch","length","map","cartItem","id","push","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAO,4BAAP;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAAQC,wBAAR,QAAuC,UAAvC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,gBAAT,QAAiC,+BAAjC;;AAGA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,OAAZ;AAAqBC,EAAAA;AAArB,CAAD,KACjB;AAAK,EAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAK,EAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACMF,SAAS,CAACG,MAAV,GACFH,SAAS,CAACI,GAAV,CAAcC,QAAQ,IAClB,oBAAC,QAAD;AAAU,EAAA,GAAG,EAAEA,QAAQ,CAACC,EAAxB;AAA4B,EAAA,IAAI,EAAED,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADE,GAIA;AAAM,EAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALN,CADJ,EAUI,oBAAC,YAAD;AAAc,EAAA,OAAO,EAAI,MAAM;AAC3BJ,IAAAA,OAAO,CAACM,IAAR,CAAa,WAAb;AACAL,IAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACC,GAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVJ,CADJ,C,CAoBA;AACA;AACA;;;AAEA,MAAMU,eAAe,GAAGZ,wBAAwB,CAAC;AAC7CI,EAAAA,SAAS,EAAGL;AADiC,CAAD,CAAhD;AAKA,eAAeE,UAAU,CAACH,OAAO,CAACc,eAAD,CAAP,CAAyBT,YAAzB,CAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\nimport CartItem from '../cart-item/cart-item.components';\r\nimport './cart-dropdown.style.scss';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { selectCartItems } from '../../redux/cart/cart.selectors';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\r\n\r\n\r\nconst CartDropDown = ({cartItems, history, dispatch}) => (\r\n    <div className='cart-dropdown'>\r\n        <div className='cart-items'>\r\n            { cartItems.length ? (\r\n            cartItems.map(cartItem => (\r\n                <CartItem key={cartItem.id} item={cartItem} />\r\n            )))\r\n            :(<span className='empty-message'>Your cart is empty</span>)\r\n\r\n            }\r\n        </div>\r\n        <CustomButton onClick = {() => {\r\n            history.push('/checkout')\r\n            dispatch(toggleCartHidden())\r\n            }}\r\n            >GO TO CHECKOUT</CustomButton>\r\n    </div>\r\n)  \r\n\r\n\r\n// const mapStateToProps = ({cart: {cartItems}}) =>({\r\n//     cartItems\r\n// });  this is replaced with the new code so that our application do not rerender(reload) when a state change in the app that does not affect this particular state /// this is what selectors are for..\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    cartItems : selectCartItems\r\n});\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps)(CartDropDown));"]},"metadata":{},"sourceType":"module"}