{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCb7pCn8Bm_gZlHWWJEucCMcbMzPo_NFzw\",\n  authDomain: \"crwn-db-40fb9.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-40fb9.firebaseio.com\",\n  projectId: \"crwn-db-40fb9\",\n  storageBucket: \"crwn-db-40fb9.appspot.com\",\n  messagingSenderId: \"110930251922\",\n  appId: \"1:110930251922:web:13aac0adca9b6ac60a164b\",\n  measurementId: \"G-BQN600M9NF\"\n}; // Take uid gotten from googleapi and save into our firebase db\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // query firestor for userAuth document to see if it already exist\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj); // console.log(newDocRef);\n  });\n  return await batch.commit();\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //Google authentication\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/user/Desktop/ECommerce/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf,C,CAWE;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAMC,QAAN,EAAgBC,cAAhB,KAAmC;AAC1E,MAAI,CAACD,QAAL,EAAe,OAD2D,CAG1E;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AACjB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBV,QAA7B;AACA,UAAMW,QAAQ,GAAG,IAAIC,IAAJ,EAAjB;;AAEA,QAAG;AACD,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,QAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOC,OAAMa,KAAN,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACF;AACH;;AAED,SAAOf,OAAP;AACD,CAxBM;AA0BP,OAAO,MAAMgB,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,WAAtB,KAAqC;AAC5E,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AAGA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACAH,EAAAA,WAAW,CAACI,OAAZ,CAAoBC,GAAG,IAAG;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAoBD,GAApB,EAFwB,CAGxB;AACD,GAJD;AAMA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AAGD,CAdM;AAkBPtC,QAAQ,CAACuC,aAAT,CAAuBtC,MAAvB;AAEA,OAAO,MAAMuC,IAAI,GAAGxC,QAAQ,CAACwC,IAAT,EAAb;AACP,OAAO,MAAM1B,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AAEA,MAAM2B,QAAQ,GAAG,IAAIzC,QAAQ,CAACwC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAE,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA9B;AAEP,eAAezC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCb7pCn8Bm_gZlHWWJEucCMcbMzPo_NFzw\",\r\n    authDomain: \"crwn-db-40fb9.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-40fb9.firebaseio.com\",\r\n    projectId: \"crwn-db-40fb9\",\r\n    storageBucket: \"crwn-db-40fb9.appspot.com\",\r\n    messagingSenderId: \"110930251922\",\r\n    appId: \"1:110930251922:web:13aac0adca9b6ac60a164b\",\r\n    measurementId: \"G-BQN600M9NF\"\r\n  };\r\n\r\n  // Take uid gotten from googleapi and save into our firebase db\r\n  export const createUserProfileDocument = async(userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    // query firestor for userAuth document to see if it already exist\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot = await userRef.get();\r\n\r\n    if(!snapShot.exists){\r\n       const {displayName, email} = userAuth;\r\n       const createAt = new Date();\r\n\r\n       try{\r\n         await userRef.set({\r\n           displayName,\r\n           email,\r\n           createAt,\r\n           ...additionalData\r\n         })\r\n       }catch(error){\r\n          console.log('error creating user', error.message);\r\n       }\r\n    }\r\n\r\n    return userRef;\r\n  }\r\n\r\n  export const addCollectionAndDocuments = async (collectionKey, objectToAdd) =>{\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    \r\n    \r\n    const batch = firestore.batch();\r\n    objectToAdd.forEach(obj =>{\r\n      const newDocRef = collectionRef.doc();\r\n      batch.set(newDocRef,obj)\r\n      // console.log(newDocRef);\r\n    })\r\n\r\n    return await batch.commit();\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n\r\n  //Google authentication\r\n\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  provider.setCustomParameters({prompt: 'select_account'});\r\n  export const signInWithGoogle =() => auth.signInWithPopup(provider);\r\n\r\n  export default firebase;"]},"metadata":{},"sourceType":"module"}